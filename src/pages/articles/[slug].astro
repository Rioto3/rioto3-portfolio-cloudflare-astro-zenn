---
// [slug].astro
import lib from 'zenn-markdown-html';
import 'zenn-content-css';
import MainLayout from '../../layouts/MainLayout.astro';
import matter from 'gray-matter';

import "../../styles/global.css";

// „Çµ„Éñ„É¢„Ç∏„É•„Éº„É´„Å™„Å©„Åã„Çâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
async function getArticles() {
  try {
    const articles = await import.meta.glob('../../content/articles/*.md', { as: 'raw' });
    if (Object.keys(articles).length > 0) {
      return articles;
    }
    
    // ‰ª£Êõø„Éë„Çπ„ÇíË©¶„ÅôÔºà„Çµ„Éñ„É¢„Ç∏„É•„Éº„É´„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
    return await import.meta.glob('../../../../content/articles/*.md', { as: 'raw' });
  } catch (error) {
    console.error("Ë®ò‰∫ã„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", error);
    return {};
  }
}

export async function getStaticPaths() {
  const articlesFiles = await getArticles();
  
  const articles = await Promise.all(
    Object.entries(articlesFiles).map(async ([path, resolver]) => {
      const rawContent = await resolver();
      const { data, content } = matter(rawContent);
      const slug = path.split('/').pop().replace('.md', '');
      
      return {
        slug,
        frontmatter: data,
        content
      };
    })
  );
  
  return articles.map(article => {
    return {
      params: { slug: article.slug },
      props: {
        title: article.frontmatter.title,
        emoji: article.frontmatter.emoji,
        type: article.frontmatter.type,
        topics: article.frontmatter.topics,
        date: article.frontmatter.date,
        body: article.content
      }
    };
  });
}

const { title, emoji, type, topics, date, body } = Astro.props;
const markdownToHtml = typeof lib === 'function' ? lib : lib.default;
const html = markdownToHtml(body, {
  embedOrigin: "https://embed.zenn.studio"
});
---

<MainLayout title={`${title} | Rioto3's Portfolio`} description={title}>
  <article>
    <!-- Ë®ò‰∫ã„Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ -->
    <header class="mb-8 pb-8 border-b">
      <div class="flex items-center mb-4">
        <span class="text-5xl mr-4">{emoji || "üìù"}</span>
        <div>
          <h1 class="text-2xl sm:text-3xl font-bold">{title}</h1>
        </div>
      </div>
      
      <div class="flex flex-wrap items-center gap-4 mt-4">
        <time datetime={date} class="text-gray-600 text-sm">
          {new Date(date || new Date()).toLocaleDateString('ja-JP', {
            year: 'numeric', 
            month: 'long', 
            day: 'numeric'
          })}
        </time>
        
        {type && (
          <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm">
            {type}
          </span>
        )}
      </div>
      
      {topics && topics.length > 0 && (
        <div class="flex flex-wrap gap-2 mt-4">
          {topics.map((topic) => (
            <span class="bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm">
              {topic}
            </span>
          ))}
        </div>
      )}
    </header>
    
    <!-- Ë®ò‰∫ã„Ç≥„É≥„ÉÜ„É≥„ÉÑÈÉ®ÂàÜ -->
    <div class="znc prose max-w-none">
      <Fragment set:html={html} />
    </div>
    
    <!-- Ë®ò‰∫ã„Éï„ÉÉ„Çø„ÉºÈÉ®ÂàÜ -->
    <div class="mt-12 pt-6 border-t text-center">
      <a 
        href="/articles" 
        class="inline-flex items-center text-blue-600 hover:text-blue-800"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Ë®ò‰∫ã‰∏ÄË¶ß„Å´Êàª„Çã
      </a>
    </div>
  </article>
</MainLayout>

<script is:inline src="https://embed.zenn.studio/js/listen-embed-event.js"></script>

<style>
  .znc {
    font-size: 1rem;
    line-height: 1.8;
  }
</style>
